# cargo-deny configuration
# https://embarkstudios.github.io/cargo-deny/

# The graph table configures how the dependency graph is constructed and thus
# which crates the checks are performed over
[graph]
# If 1 or more target triples (and optionally, target_features) are specified,
# only the specified targets will be used when building the graph
targets = [
    "x86_64-unknown-linux-gnu",
    "x86_64-pc-windows-msvc",
    "x86_64-apple-darwin",
]

# This section is considered when running `cargo deny check advisories`
# More documentation for the advisories section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/advisories/cfg.html
[advisories]
# The path where the advisory database is cloned/fetched into
#db-path = "$CARGO_HOME/advisory-dbs"
# The url(s) of the advisory databases to use
#db-urls = ["https://github.com/rustsec/advisory-db"]
# The lint level for unmaintained crates
unmaintained = "all"
# The lint level for crates that have been yanked from their source registry
yanked = "warn"
# A list of advisory IDs to ignore. Note that ignored advisories will still
# output a note when they are encountered.
ignore = [
    # Temporarily ignored - unmaintained but no direct security vulnerabilities
    "RUSTSEC-2024-0384",  # instant - unmaintained, no safe upgrade available (via sled â†’ parking_lot)
    "RUSTSEC-2024-0436",  # paste - unmaintained (via ark-* crates)
]

# This section is considered when running `cargo deny check licenses`
# More documentation for the licenses section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/licenses/cfg.html
[licenses]
# List of explicitly allowed licenses
# See https://spdx.org/licenses/ for list of possible licenses
allow = [
    "MIT",
    "Apache-2.0",
    "Apache-2.0 WITH LLVM-exception",
    "BSD-2-Clause",
    "BSD-3-Clause",
    "ISC",
    "Unicode-DFS-2016",
    "Unicode-3.0",
    "CC0-1.0",
    "Unlicense",
    "Zlib",
]

# Confidence threshold for detecting a license from a license text.
# 0.8 means we need to be 80% confident that the text is a particular license.
confidence-threshold = 0.8

# Some crates don't have (easily) machine readable licensing information,
# adding a clarification or license text here will go a long way to help
# automated tools
[[licenses.clarify]]
crate = "ring"
# SPDX identifier for the license
expression = "MIT AND ISC AND OpenSSL"
license-files = [
    { path = "LICENSE", hash = 0xbd0eed23 }
]

# This section is considered when running `cargo deny check bans`
[bans]
# Lint level for when multiple versions of the same crate are detected
multiple-versions = "warn"
# Lint level for when a crate version requirement is `*`
wildcards = "allow"
# The graph highlighting used when creating dotgraphs for crates
# with multiple versions
# * lowest-version - The path to the lowest versioned duplicate is highlighted
# * simplest-path - The path to the version with the fewest edges is highlighted
# * all - Both lowest-version and simplest-path are used
highlight = "all"

# List of crates that are allowed. Use with care!
allow = [
    #{ crate = "ansi_term@0.11.0", reason = "allowed for legacy compatibility" },
]

# List of crates to deny
deny = [
    # Each entry the name of a crate and a version range. If version is
    # not specified, all versions will be matched.
    #{ crate = "ansi_term@0.11.0", reason = "security vulnerability" },
]

# Certain crates/versions that will be skipped when doing duplicate detection.
skip = [
    #{ crate = "ansi_term@0.11.0", reason = "legacy compatibility" },
]

# Similarly to `skip` allows you to skip certain crates from being checked. Unlike
# `skip`, a skipped crate is removed from the dependency graph entirely and so
# will not surface in any other context
skip-tree = [
    #{ crate = "ansi_term@0.11.0", depth = 20 },
]

# This section is considered when running `cargo deny check sources`.
# More documentation about the 'sources' section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/sources/cfg.html
[sources]
# Lint level for what to happen when a crate from a crate registry that is
# not in the allow list is encountered
unknown-registry = "warn"
# Lint level for what to happen when a crate from a git repository that is not
# in the allow list is encountered
unknown-git = "warn"
# List of URLs for allowed crate registries. Defaults to the crates.io index
# if not specified. If it is specified but empty, no registries are allowed.
allow-registry = ["https://github.com/rust-lang/crates.io-index"]
# List of URLs for allowed Git repositories
allow-git = [
    "https://github.com/MachinaIO/diamond-io",
    "https://github.com/MachinaIO/openfhe-rs.git",
]
