name: Code Coverage (Tarpaulin)

permissions:
  contents: read
  pull-requests: write
  checks: write
  actions: read
  id-token: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-coverage-
          ${{ runner.os }}-cargo-

    - name: Install tarpaulin
      run: |
        if ! command -v cargo-tarpaulin &> /dev/null; then
          cargo install cargo-tarpaulin
        fi

    - name: Run tests with coverage
      run: |
        cargo tarpaulin \
          --verbose \
          --all-features \
          --workspace \
          --timeout 120 \
          --out xml \
          --out lcov \
          --out html \
          --output-dir coverage/ \
          --exclude-files target/* \
          --exclude-files tests/*

    - name: Upload HTML coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html-report
        path: coverage/tarpaulin-report.html

    - name: Coverage Summary
      run: |
        if [ -f coverage/cobertura.xml ]; then
          echo "Coverage report generated successfully"
          echo "Check the artifacts for detailed HTML report"
        fi

    - name: Generate coverage summary for PR
      if: github.event_name == 'pull_request'
      id: coverage-summary
      run: |
        echo "## 📊 Code Coverage Report (tarpaulin)" > coverage_summary.txt
        echo "" >> coverage_summary.txt
        echo "**Coverage files generated:**" >> coverage_summary.txt
        echo "- 📄 Cobertura XML: \`coverage/cobertura.xml\`" >> coverage_summary.txt
        echo "- 📁 HTML Report: \`coverage/\`" >> coverage_summary.txt
        echo "" >> coverage_summary.txt
        echo "**View detailed coverage:**" >> coverage_summary.txt
        echo "1. Download the HTML artifact from this run" >> coverage_summary.txt
        echo "2. Extract and open \`index.html\` in your browser" >> coverage_summary.txt
        echo "" >> coverage_summary.txt
        
        if [ -f coverage/cobertura.xml ]; then
          echo "**Coverage File Info:**" >> coverage_summary.txt
          echo "\`\`\`" >> coverage_summary.txt
          echo "Cobertura XML: $(ls -lah coverage/cobertura.xml | awk '{print $5}')" >> coverage_summary.txt
          echo "\`\`\`" >> coverage_summary.txt
        fi
        
        echo "COVERAGE_SUMMARY<<EOF" >> $GITHUB_OUTPUT
        cat coverage_summary.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Add coverage comment to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      continue-on-error: true
      with:
        script: |
          const coverageSummary = `${{ steps.coverage-summary.outputs.COVERAGE_SUMMARY }}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: coverageSummary
          });
