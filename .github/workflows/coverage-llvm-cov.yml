name: Code Coverage (llvm-cov)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  issues: write
  actions: read
  id-token: write
  pull-requests: write
  checks: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          git \
          pkg-config \
          libssl-dev \
          autoconf \
          automake \
          libtool \
          libgmp-dev \
          libntl-dev \
          wget

    - name: Install OpenFHE dependencies
      run: |
        sudo apt-get install -y \
          libboost-all-dev \
          libgmp3-dev \
          libmpfr-dev \
          libfftw3-dev
          
    - name: Clone and build OpenFHE
      run: |
        git clone https://github.com/MachinaIO/openfhe-development.git
        cd openfhe-development
        git checkout feat/improve_determinant
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=/usr/local \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_UNITTESTS=OFF \
              -DBUILD_EXAMPLES=OFF \
              -DBUILD_BENCHMARKS=OFF \
              -DWITH_OPENMP=ON \
              -DCMAKE_CXX_STANDARD=17 \
              -DCMAKE_CXX_FLAGS="-O2 -DNDEBUG -Wno-unused-parameter -Wno-unused-function -Wno-missing-field-initializers" \
              ..
        make -j$(nproc)
        sudo make install
        sudo ldconfig

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly
      with:
        toolchain: nightly-2025-01-01
        components: llvm-tools-preview
        
    - name: Set environment variables for OpenFHE
      run: |
        echo "OPENFHE_ROOT=/usr/local" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo "CXXFLAGS=-std=c++17 -O2 -DNDEBUG -Wno-unused-parameter -Wno-unused-function -Wno-missing-field-initializers" >> $GITHUB_ENV
        echo "CXX_FLAGS=-std=c++17 -O2 -DNDEBUG -Wno-unused-parameter -Wno-unused-function -Wno-missing-field-initializers" >> $GITHUB_ENV

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-coverage-
          ${{ runner.os }}-cargo-

    - name: Install cargo-llvm-cov
      run: |
        if ! command -v cargo-llvm-cov &> /dev/null; then
          cargo install cargo-llvm-cov
        fi

    - name: Clean previous coverage data
      run: |
        export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
        export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
        cargo llvm-cov clean --workspace

    - name: Run tests with coverage
      run: |
        export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
        export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
        cargo llvm-cov \
          --workspace \
          --all-features \
          --lcov \
          --output-path coverage.lcov

    - name: Generate HTML report
      run: |
        export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
        export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
        cargo llvm-cov \
          --workspace \
          --all-features \
          --html \
          --output-dir coverage-html

    - name: Generate coverage summary
      id: coverage
      run: |
        export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
        export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
        echo "## 📊 Code Coverage Report" > coverage_summary.txt
        echo "" >> coverage_summary.txt
        
        # Generate detailed report and capture output
        cargo llvm-cov \
          --workspace \
          --all-features \
          --summary-only > coverage_report.txt 2>&1
        
        # Format the output for GitHub
        echo '```' >> coverage_summary.txt
        cat coverage_report.txt >> coverage_summary.txt
        echo '```' >> coverage_summary.txt
        echo "" >> coverage_summary.txt
        
        # Add additional info
        echo "**Generated Files:**" >> coverage_summary.txt
        echo "- 📄 LCOV Report: \`coverage.lcov\`" >> coverage_summary.txt
        echo "- 📁 HTML Report: \`coverage-html/\`" >> coverage_summary.txt
        echo "" >> coverage_summary.txt
        echo "**View detailed coverage:**" >> coverage_summary.txt
        echo "1. Download the HTML artifact from this run" >> coverage_summary.txt
        echo "2. Extract and open \`index.html\` in your browser" >> coverage_summary.txt
        
        # Set output for next step
        echo "COVERAGE_SUMMARY<<EOF" >> $GITHUB_OUTPUT
        cat coverage_summary.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Upload HTML coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html-report
        path: coverage-html/

    - name: Upload LCOV coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-lcov
        path: coverage.lcov

    - name: Add coverage comment to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      continue-on-error: true
      with:
        script: |
          const coverageSummary = `${{ steps.coverage.outputs.COVERAGE_SUMMARY }}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: coverageSummary
          });

    - name: Print coverage summary
      run: |
        export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
        export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
        echo "## 📊 Coverage Report Generated Successfully"
        echo ""
        echo "Coverage Summary:"
        cargo llvm-cov \
          --workspace \
          --all-features \
          --summary-only
        echo ""
        echo "Files generated:"
        if [ -f coverage.lcov ]; then
          echo "✅ LCOV file: coverage.lcov ($(wc -l < coverage.lcov) lines)"
          ls -la coverage.lcov
        fi
        if [ -d coverage-html ]; then
          echo "✅ HTML report: coverage-html/"
          ls -la coverage-html/
        fi
