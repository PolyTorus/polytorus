name: Code Coverage (llvm-cov)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  issues: write
  actions: read
  id-token: write
  pull-requests: write
  checks: write

env:
  CARGO_TERM_COLOR: always

jobs:
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: llvm-tools-preview

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-coverage-
          ${{ runner.os }}-cargo-

    - name: Install cargo-llvm-cov
      run: |
        if ! command -v cargo-llvm-cov &> /dev/null; then
          cargo install cargo-llvm-cov
        fi

    - name: Clean previous coverage data
      run: cargo llvm-cov clean --workspace

    - name: Run tests with coverage
      run: |
        cargo llvm-cov \
          --workspace \
          --all-features \
          --lcov \
          --output-path coverage.lcov

    - name: Generate HTML report
      run: |
        cargo llvm-cov \
          --workspace \
          --all-features \
          --html \
          --output-dir coverage-html

    - name: Generate summary report
      run: |
        cargo llvm-cov \
          --workspace \
          --all-features \
          --summary-only

    - name: Upload HTML coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html-report
        path: coverage-html/

    - name: Upload LCOV coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-lcov
        path: coverage.lcov

    - name: Upload to Codecov (optional)
      uses: codecov/codecov-action@v4
      continue-on-error: true
      with:
        file: coverage.lcov
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true

    - name: Upload to Coveralls (optional)
      uses: coverallsapp/github-action@v2
      continue-on-error: true
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: coverage.lcov

    - name: Add coverage comment to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      continue-on-error: true
      with:
        script: |
          const fs = require('fs');
          
          // Generate coverage summary comment
          let comment = '## üìä Code Coverage Report\n\n';
          comment += '‚úÖ Coverage data has been generated successfully\n\n';
          comment += '**Artifacts:**\n';
          comment += '- üìÑ LCOV Report: `coverage.lcov`\n';
          comment += '- üìÅ HTML Report: `coverage-html/`\n\n';
          comment += '**View detailed coverage:**\n';
          comment += '1. Download the HTML artifact from this run\n';
          comment += '2. Extract and open `index.html` in your browser\n\n';
          comment += '_Coverage reports are also uploaded to Codecov and Coveralls (if configured)_';

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Print coverage summary
      run: |
        echo "## Coverage Report Generated"
        echo "üìä Coverage data has been generated and saved as artifacts"
        if [ -f coverage.lcov ]; then
          echo "‚úÖ LCOV file: coverage.lcov"
          ls -la coverage.lcov
        fi
        if [ -d coverage-html ]; then
          echo "‚úÖ HTML report: coverage-html/"
          ls -la coverage-html/
        fi
