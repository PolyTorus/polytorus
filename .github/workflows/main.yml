---
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 高速フィードバック用の基本チェック
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libssl-dev pkg-config \
            libgmp-dev libntl-dev libboost-all-dev libgmp3-dev libmpfr-dev \
            libfftw3-dev autoconf automake libtool

      - name: Setup OpenFHE
        run: |
          echo "=== Installing OpenFHE from source ==="
          git clone \
            https://github.com/MachinaIO/openfhe-development.git \
            /tmp/openfhe
          cd /tmp/openfhe
          git checkout feat/improve_determinant
          mkdir build && cd build
          cmake -DCMAKE_INSTALL_PREFIX=/usr/local \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_UNITTESTS=OFF \
                -DBUILD_EXAMPLES=OFF \
                -DBUILD_BENCHMARKS=OFF \
                -DWITH_OPENMP=ON \
                -DCMAKE_CXX_STANDARD=17 \
                -DCMAKE_CXX_FLAGS="-O2 -DNDEBUG -Wno-unused-parameter \
                  -Wno-unused-function -Wno-missing-field-initializers" \
                ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig

          echo "=== Verifying OpenFHE installation ==="
          echo "Headers in /usr/local/include:"
          find /usr/local/include -name "*openfhe*" -type d || \
            echo "No OpenFHE headers found"
          echo "Libraries in /usr/local/lib:"
          ls -la /usr/local/lib/libOPENFHE* || \
            echo "No OpenFHE libraries found"

          # Create symlinks for easier header discovery
          if [ -d "/usr/local/include/openfhe" ]; then
            sudo ln -sf /usr/local/include/openfhe \
              /usr/include/openfhe || true
          fi
          # Set environment variables
          echo "OPENFHE_ROOT=/usr/local" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" \
            >> $GITHUB_ENV
          echo "CPATH=/usr/local/include:/usr/local/include/openfhe:$CPATH" \
            >> $GITHUB_ENV
          echo "LIBRARY_PATH=/usr/local/lib:$LIBRARY_PATH" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH" \
            >> $GITHUB_ENV

          # Uncomment the following line to force OpenFHE testing in CI
          # echo "FORCE_OPENFHE_CI=1" >> $GITHUB_ENV

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: make clippy-strict

      - name: Check for security vulnerabilities
        run: |
          cargo install cargo-audit
          cargo audit

  # 基本テストスイート
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quick-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libssl-dev pkg-config \
            libgmp-dev libntl-dev libboost-all-dev libgmp3-dev libmpfr-dev \
            libfftw3-dev autoconf automake libtool

      - name: Setup OpenFHE
        run: |
          git clone \
            https://github.com/MachinaIO/openfhe-development.git \
            /tmp/openfhe
          cd /tmp/openfhe
          git checkout feat/improve_determinant
          mkdir build && cd build
          cmake -DCMAKE_INSTALL_PREFIX=/usr/local \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_UNITTESTS=OFF \
                -DBUILD_EXAMPLES=OFF \
                -DBUILD_BENCHMARKS=OFF \
                -DWITH_OPENMP=ON \
                -DCMAKE_CXX_STANDARD=17 \
                -DCMAKE_CXX_FLAGS="-O2 -DNDEBUG -Wno-unused-parameter \
                  -Wno-unused-function -Wno-missing-field-initializers" \
                ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          sudo mkdir -p /usr/local/lib/pkgconfig
          echo "OPENFHE_ROOT=/usr/local" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" \
            >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH" \
            >> $GITHUB_ENV

      - name: Verify OpenFHE installation
        run: |
          echo "=== OpenFHE Installation Verification ==="
          echo "OPENFHE_ROOT: $OPENFHE_ROOT"
          echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
          echo ""
          echo "--- Library files ---"
          ls -la /usr/local/lib/libOPENFHE* || \
            echo "No OpenFHE libraries found in /usr/local/lib"
          echo ""
          echo "--- Header files ---"
          find /usr/local/include -name "*openfhe*" -type d || \
            echo "No OpenFHE headers found"
          echo ""          echo "--- Environment check ---"
          ldconfig -p | grep -i openfhe || \
            echo "OpenFHE libraries not in ldconfig cache"
          echo ""
          echo "--- PKG_CONFIG check ---"
          pkg-config --exists openfhe && \
            echo "OpenFHE pkg-config found" || \
            echo "OpenFHE pkg-config not found"

      - name: Run tests
        env:
          RUST_LOG: info
          RUST_BACKTRACE: full
        run: cargo test --verbose

      - name: Run integration tests
        env:
          RUST_LOG: info
          RUST_BACKTRACE: full
        run: cargo test --test '*' --verbose

  # カバレッジレポート（Linuxのみ）
  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: quick-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libssl-dev \
            pkg-config libgmp-dev libntl-dev libboost-all-dev \
            libgmp3-dev libmpfr-dev libfftw3-dev autoconf automake \
            libtool

      - name: Setup OpenFHE
        run: |
          git clone \
            https://github.com/MachinaIO/openfhe-development.git \
            /tmp/openfhe
          cd /tmp/openfhe
          git checkout feat/improve_determinant
          mkdir build && cd build
          cmake -DCMAKE_INSTALL_PREFIX=/usr/local \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_UNITTESTS=OFF \
                -DBUILD_EXAMPLES=OFF \
                -DBUILD_BENCHMARKS=OFF \
                -DWITH_OPENMP=ON \
                -DCMAKE_CXX_STANDARD=17 \
                -DCMAKE_CXX_FLAGS="-O2 -DNDEBUG \
                  -Wno-unused-parameter -Wno-unused-function \
                  -Wno-missing-field-initializers" \
                ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          sudo mkdir -p /usr/local/lib/pkgconfig
          echo "OPENFHE_ROOT=/usr/local" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" \
            >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH" \
            >> $GITHUB_ENV

      - name: Verify OpenFHE installation for coverage
        run: |
          echo "=== OpenFHE Installation Verification for Coverage ==="
          echo "OPENFHE_ROOT: /usr/local"
          echo "LD_LIBRARY_PATH: /usr/local/lib:$LD_LIBRARY_PATH"
          echo ""
          echo "--- Library files ---"
          ls -la /usr/local/lib/libOPENFHE* || \
            echo "No OpenFHE libraries found in /usr/local/lib"
          echo ""
          echo "--- ldconfig check ---"
          ldconfig -p | grep -i openfhe || \
            echo "OpenFHE libraries not in ldconfig cache"
          echo ""
          echo "--- Test simple linking ---"
          cd /tmp && echo 'int main() { return 0; }' > test.c
          gcc -o test test.c -L/usr/local/lib -lOPENFHEcore \
            -lOPENFHEpke -lOPENFHEbinfhe || \
            echo "Direct linking test failed"
          echo ""

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage report
        env:
          OPENFHE_ROOT: /usr/local
          LD_LIBRARY_PATH: >-
            /usr/local/lib:/usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu
          PKG_CONFIG_PATH: /usr/local/lib/pkgconfig
          RUST_BACKTRACE: full
        run: |
          echo "=== Environment for tarpaulin ==="
          echo "OPENFHE_ROOT: $OPENFHE_ROOT"
          echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
          echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          echo ""

          # First try a simple compilation test
          echo "=== Testing compilation without tarpaulin ==="
          cargo build --all-features --workspace || {
            echo "Build failed, cannot proceed with coverage"
            exit 1
          }

          # Try running a basic test first
          echo "=== Testing basic test execution ==="
          cargo test --test diamond_io_integration_tests --verbose || {
            echo "Basic integration test failed"
          }

          echo "=== Running tarpaulin ==="
          CARGO_TARPAULIN=1 cargo tarpaulin \
            --verbose \
            --all-features \
            --workspace \
            --timeout 300 \
            --out xml \
            --exclude-files "target/*" \
            --exclude-files "*/build.rs" \
            --exclude-files "kani-verification/*" \
            --skip-clean || {
              echo "Tarpaulin failed, generating fallback coverage"
              # Generate a minimal coverage report
              echo '<?xml version="1.0" encoding="UTF-8"?>
              <coverage version="1">
                <sources>
                  <source>.</source>
                </sources>
                <packages>
                  <package name="polytorus" line-rate="0.0" \
                    branch-rate="0.0" complexity="0">
                    <classes></classes>
                  </package>
                </packages>
              </coverage>' > cobertura.xml
            }

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: cobertura.xml
          fail_ci_if_error: false
        continue-on-error: true

  # Dockerビルドとプッシュ（タグ時のみ）
  docker:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [test, coverage]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # セキュリティスキャン
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quick-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libssl-dev pkg-config \
            libgmp-dev libntl-dev libboost-all-dev libgmp3-dev libmpfr-dev \
            libfftw3-dev autoconf automake libtool

      - name: Setup OpenFHE
        run: |
          git clone \
            https://github.com/MachinaIO/openfhe-development.git \
            /tmp/openfhe
          cd /tmp/openfhe
          git checkout feat/improve_determinant
          mkdir build && cd build
          cmake -DCMAKE_INSTALL_PREFIX=/usr/local \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_UNITTESTS=OFF \
                -DBUILD_EXAMPLES=OFF \
                -DBUILD_BENCHMARKS=OFF \
                -DWITH_OPENMP=ON \                -DCMAKE_CXX_STANDARD=17 \
                -DCMAKE_CXX_FLAGS="-O2 -DNDEBUG \
                  -Wno-unused-parameter -Wno-unused-function \
                  -Wno-missing-field-initializers" \
                ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          sudo mkdir -p /usr/local/lib/pkgconfig
          echo "OPENFHE_ROOT=/usr/local" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" \
            >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH" \
            >> $GITHUB_ENV

      - name: Run security audit
        run: |
          cargo install cargo-audit
          cargo audit

      - name: Run dependency check
        run: |
          cargo install cargo-deny
          cargo deny check
